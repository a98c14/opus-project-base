// clang-format off
#pragma once
#include "base.h"

/** basic shader */
read_only global String d_shader_opengl_basic_frag = string_comp(
	"#version 430 core\n"
	"\n"
	"layout(location = 0) in vec2 a_pos;\n"
	"layout(location = 1) in vec2 a_tex_coord;\n"
	"layout(location = 2) in vec4 a_color;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"uniform mat4 u_model;\n"
	"\n"
	"/* Vertex Data */\n"
	"in layout(location = 3) vec2 v_tex_coord;\n"
	"in layout(location = 4) vec4 v_color;\n"
	"\n"
	"out vec4 color;\n"
	"\n"
	"void main() {\n"
	"color = v_color;\n"
	"}\n"
	"\n"
);

read_only global String d_shader_opengl_basic_vert = string_comp(
	"#version 430 core\n"
	"\n"
	"layout(location = 0) in vec2 a_pos;\n"
	"layout(location = 1) in vec2 a_tex_coord;\n"
	"layout(location = 2) in vec4 a_color;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"\n"
	"uniform mat4 u_model;\n"
	"\n"
	"/* Vertex Data */\n"
	"out layout(location = 3) vec2 v_tex_coord;\n"
	"out layout(location = 4) vec4 v_color;\n"
	"\n"
	"void main()\n"
	"{\n"
	"v_tex_coord = a_tex_coord;\n"
	"v_color = a_color;\n"
	"gl_Position = u_model * vec4(a_pos, 0, 1);\n"
	"}\n"
);

/** circle shader */
read_only global String d_shader_opengl_circle_frag = string_comp(
	"#version 430 core\n"
	"\n"
	"layout(location = 0) in vec2 a_pos;\n"
	"layout(location = 1) in vec2 a_tex_coord;\n"
	"layout(location = 2) in vec3 a_color;\n"
	"\n"
	"struct ShaderData\n"
	"{\n"
	"mat4 model;\n"
	"vec4 color;\n"
	"float thickness;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"mat4 g_projection;\n"
	"mat4 g_view;\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) buffer Custom\n"
	"{\n"
	"ShaderData data[];\n"
	"};\n"
	"\n"
	"/* Vertex Data */\n"
	"in layout(location = 3) vec2 v_tex_coord;\n"
	"in layout(location = 4) vec4 v_color;\n"
	"in layout(location = 5) float v_thickness;\n"
	"\n"
	"out vec4 color;\n"
	"\n"
	"void main()\n"
	"{\n"
	"vec2 uv = v_tex_coord;\n"
	"uv = uv * 2 - 1;\n"
	"float thickness = v_thickness;\n"
	"\n"
	"float d = distance(uv, vec2(0.0, 0.0));\n"
	"float a = 1 - smoothstep(1.0 - 0.05, 1.0, d);\n"
	"a -= 1 - smoothstep(1.0 - thickness - 0.05, 1 - thickness, d);\n"
	"color = vec4(v_color.rgb, a * v_color.a);\n"
	"}\n"
	"\n"
);

read_only global String d_shader_opengl_circle_vert = string_comp(
	"#version 430 core\n"
	"\n"
	"layout(location = 0) in vec2 a_pos;\n"
	"layout(location = 1) in vec2 a_tex_coord;\n"
	"layout(location = 2) in vec3 a_color;\n"
	"\n"
	"struct ShaderData\n"
	"{\n"
	"mat4 model;\n"
	"vec4 color;\n"
	"float thickness;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"mat4 g_projection;\n"
	"mat4 g_view;\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) buffer Custom\n"
	"{\n"
	"ShaderData data[];\n"
	"};\n"
	"\n"
	"/* Vertex Data */\n"
	"out layout(location = 3) vec2 v_tex_coord;\n"
	"out layout(location = 4) vec4 v_color;\n"
	"out layout(location = 5) float v_thickness;\n"
	"\n"
	"void main()\n"
	"{\n"
	"v_tex_coord = a_tex_coord;\n"
	"v_color = data[gl_InstanceID].color;\n"
	"v_thickness = data[gl_InstanceID].thickness;\n"
	"gl_Position = g_projection * g_view * data[gl_InstanceID].model * vec4(a_pos, 0, 1);\n"
	"}\n"
);

/** font shader */
read_only global String d_shader_opengl_font_frag = string_comp(
	"#version 430 core\n"
	"#define DEBUG 0\n"
	"\n"
	"layout(location = 0) in vec2 a_pos;\n"
	"layout(location = 1) in vec2 a_tex_coord;\n"
	"layout(location = 2) in vec4 a_color;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"uniform mat4 u_model;\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"in layout(location = 3) vec2 v_tex_coord;\n"
	"in layout(location = 4) vec4 v_color;\n"
	"\n"
	"out vec4 color;\n"
	"\n"
	"void main() {\n"
	"vec2 uv = v_tex_coord;\n"
	"float d = texture(u_main_texture, v_tex_coord).r;\n"
	"\n"
	"float aaf = fwidth(d);\n"
	"float alpha = smoothstep(0.5 - aaf, 0.5 + aaf, d);\n"
	"\n"
	"color = vec4(v_color.rgb, v_color.a * d);\n"
	"#if DEBUG == 1\n"
	"color = mix(vec4(1, 0, 0, 1), color, color.a);\n"
	"#endif\n"
	"}\n"
	"\n"
);

read_only global String d_shader_opengl_font_vert = string_comp(
	"#version 430 core\n"
	"\n"
	"layout(location = 0) in vec2 a_pos;\n"
	"layout(location = 1) in vec2 a_tex_coord;\n"
	"layout(location = 2) in vec4 a_color;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"uniform mat4 u_model;\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"uniform float u_softness;\n"
	"\n"
	"/* Vertex Data */\n"
	"out layout(location = 3) vec2 v_tex_coord;\n"
	"out layout(location = 4) vec4 v_color;\n"
	"\n"
	"void main()\n"
	"{\n"
	"v_tex_coord = a_tex_coord;\n"
	"v_color = a_color;\n"
	"gl_Position = u_model * vec4(a_pos, 0, 1);\n"
	"}\n"
);

/** rect shader */
read_only global String d_shader_opengl_rect_frag = string_comp(
	"#version 430 core\n"
	"\n"
	"layout(location = 0) in vec2 a_pos;\n"
	"layout(location = 1) in vec2 a_tex_coord;\n"
	"layout(location = 2) in vec4 a_color;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"uniform mat4 u_model;\n"
	"\n"
	"/* Vertex Data */\n"
	"in layout(location = 3) vec2 v_tex_coord;\n"
	"in layout(location = 4) vec4 v_color;\n"
	"\n"
	"out vec4 color;\n"
	"\n"
	"void main() {\n"
	"float softness = 1;\n"
	"vec2 uv = v_tex_coord;\n"
	"uv = uv * 2.0 - 1.0;\n"
	"uv = abs(uv);\n"
	"vec2 p = fwidth(uv);\n"
	"float a_x = 1 - smoothstep(1.0 - softness * p.x, 1.0, uv.x);\n"
	"float a_y = 1 - smoothstep(1.0 - softness * p.y, 1.0, uv.y);\n"
	"float a = min(a_x, a_y) * max(a_x, a_y);\n"
	"color = vec4(v_color.xyz, a * v_color.a);\n"
	"}\n"
	"\n"
);

read_only global String d_shader_opengl_rect_vert = string_comp(
	"#version 430 core\n"
	"\n"
	"layout(location = 0) in vec2 a_pos;\n"
	"layout(location = 1) in vec2 a_tex_coord;\n"
	"layout(location = 2) in vec4 a_color;\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"uniform mat4 u_model;\n"
	"\n"
	"/* Vertex Data */\n"
	"out layout(location = 3) vec2 v_tex_coord;\n"
	"out layout(location = 4) vec4 v_color;\n"
	"\n"
	"void main()\n"
	"{\n"
	"v_tex_coord = a_tex_coord;\n"
	"v_color = a_color;\n"
	"gl_Position = u_model * vec4(a_pos, 0, 1);\n"
	"}\n"
);

/** sprite shader */
read_only global String d_shader_opengl_sprite_frag = string_comp(
	"#version 430 core\n"
	"\n"
	"layout(location = 0) in vec2 a_pos;\n"
	"layout(location = 1) in vec2 a_tex_coord;\n"
	"layout(location = 2) in vec3 a_color;\n"
	"\n"
	"struct ShaderData\n"
	"{\n"
	"mat4 model;\n"
	"vec4 bounds;\n"
	"vec4 color;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"mat4 g_projection;\n"
	"mat4 g_view;\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) buffer Custom\n"
	"{\n"
	"ShaderData data[];\n"
	"};\n"
	"\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"in vec2 v_tex_coord;\n"
	"in vec4 v_color;\n"
	"out vec4 color;\n"
	"\n"
	"vec2 calculate_uv(vec2 uv, vec2 tex_size)\n"
	"{\n"
	"vec2 pixels = uv * tex_size;\n"
	"vec2 alpha = 0.7 * fwidth(pixels);\n"
	"vec2 pixels_fract = fract(pixels);\n"
	"vec2 pixels_diff = clamp( .5 / alpha * pixels_fract, 0.0, .5 ) + clamp( .5 / alpha * (pixels_fract - 1) + .5, 0.0, .5 );\n"
	"pixels = floor(pixels) + pixels_diff;\n"
	"return pixels / tex_size;\n"
	"}\n"
	"\n"
	"void main() {\n"
	"vec2 uv = calculate_uv(v_tex_coord, texture_size);\n"
	"vec4 texture_color = texture(u_main_texture, uv);\n"
	"\n"
	"vec3 mixed_color = mix(texture_color.xyz, v_color.xyz, v_color.a);\n"
	"color = vec4(mixed_color, texture_color.a);\n"
	"}\n"
	"\n"
);

read_only global String d_shader_opengl_sprite_vert = string_comp(
	"#version 430 core\n"
	"\n"
	"layout(location = 0) in vec2 a_pos;\n"
	"layout(location = 1) in vec2 a_tex_coord;\n"
	"layout(location = 2) in vec3 a_color;\n"
	"\n"
	"struct ShaderData\n"
	"{\n"
	"mat4 model;\n"
	"vec4 bounds;\n"
	"vec4 color;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 0) uniform Global\n"
	"{\n"
	"mat4 g_projection;\n"
	"mat4 g_view;\n"
	"vec4 g_time;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 1) uniform Texture\n"
	"{\n"
	"vec2 texture_size;\n"
	"float texture_layer_count;\n"
	"};\n"
	"\n"
	"layout (std140, binding = 2) buffer Custom\n"
	"{\n"
	"ShaderData data[];\n"
	"};\n"
	"\n"
	"uniform sampler2D u_main_texture;\n"
	"\n"
	"/* Vertex Data */\n"
	"out vec2 v_tex_coord;\n"
	"out vec4 v_color;\n"
	"\n"
	"void main()\n"
	"{\n"
	"vec4 bounds = data[gl_InstanceID].bounds;\n"
	"float x = (a_tex_coord.x * bounds.z + bounds.x) / texture_size.x;\n"
	"float y = ((1 - a_tex_coord.y) * bounds.w + bounds.y) / texture_size.y;\n"
	"v_tex_coord = vec2(x, y);\n"
	"v_color = data[gl_InstanceID].color;\n"
	"gl_Position = g_projection * g_view * data[gl_InstanceID].model * vec4(a_pos, 0, 1);\n"
	"}\n"
);

